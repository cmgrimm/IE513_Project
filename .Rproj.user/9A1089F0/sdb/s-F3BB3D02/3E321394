{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\npackages <- c(\n  \"shiny\",\n  \"highcharter\",\n  \"stats\"\n)\n\nipak <- function(pkg){\n  new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n  if (length(new.pkg)) \n    install.packages(new.pkg, dependencies = TRUE)\n  sapply(pkg, require, character.only = TRUE)\n}\n\nipak(packages)\n\n\n# Begin server ------------------------------------------------------------\n\nshinyServer(function(input, output) {\n\n  t_intervals <- reactive({ seq(1,input$t_max,1) }) #time periods, max set by user\n  t_instance <- reactive({ input$t_instance }) #time instance selected\n  \n  #set the function of lambda\n  l_calculation <- reactive({\n    switch(input$l_fun,\n           \"sin(t/4)+2\" = function(t) (sin(t/4)+2),\n           \"(1/t)+1\" = function(t) (1/t)+1,\n           \"log(t)\" = function(t) log(t),\n           \"custom\" = function(t) eval(parse(text = input$l_fun_custom))\n    )#end switch\n  })#end l_calculation\n  \n  #calculate lambda over time\n  l_values <- reactive({\n    l_function <- l_calculation()\n    l_function(t_intervals())\n  })\n  \n  #instance lambda\n  l_instance <- reactive({\n    l_function <- l_calculation()\n    l_function(t_instance()+1)#add one to get correct t, R has array base 1 and our array starts at t=0\n  })\n  \n  #density values for poisson distribution at a given instance lambda \n  p_dist <- reactive({\n    p_x <- dpois(seq(0,10),lambda = l_instance())\n    p_x #notice to get P(X=x) call p_x[x+1]\n  })\n  \n  # Outputs -----------------------------------------------------------------\n  \n  #render t_instance slider, max value set by user\n  output$t_instance_ui <- renderUI({\n    \n    sliderInput(\"t_instance\",\n                \"Select a Time Instance\",\n                min = 1,\n                max = input$t_max,\n                value = 1,\n                step = 1)\n    \n  })#end renderUI slider input\n  \n  #render highchart of lambda over time given selected lambda function\n  output$l_fun_hc <- renderHighchart({\n    hc <- highchart() %>%\n      hc_xAxis(plotLines = list(\n                list(\n                  label = list(text = paste0(c(\"&lambda;: \", round(l_instance(),digits = 2)),collapse=\"\"),\n                               useHTML = T\n                               ),\n                  color = \"#FF0000\",\n                  width = 2,\n                  value = t_instance()\n                 ) \n                )\n               ) %>%\n      hc_add_series(name = '&lambda;', \n                    data = round(l_values(),2),\n                    marker=list(enabled=F),\n                    useHTML = T) %>%\n      hc_title(text = \"&lambda; as a Function of Time\",\n               align = 'left',\n               useHTML = T) %>%\n      hc_add_theme(hc_theme_tufte()) %>%\n      hc_tooltip(headerFormat = 't: <b>{point.key}</b><table>',\n                 pointFormat = '<tr><td>{series.name}:  </td><td style=\"text-align: right\"><b>{point.y}</b></td></tr></table>',\n                 useHTML = T\n                 ) %>%\n      hc_plotOptions(series=list(animation=F))\n  })#end highchart\n  \n  #render poisson density function given an instance lambda\n  output$p_dist_instance_hc <- renderHighchart({\n    hc <- highchart() %>%\n      hc_xAxis(seq(0,10)) %>%\n      hc_add_series(name = \"P(X = x)\", \n                    data = round(p_dist(),2), \n                    marker=list(enabled=F),\n                    type = \"areaspline\") %>%\n      hc_yAxis(min = 0, max = 0.5) %>%\n      hc_title(text = paste0(c(\"Poisson Distribution: &lambda;=\",round(l_instance(),2)),collapse=\"\"),\n               align = \"left\",\n               useHTML = T) %>%\n      hc_add_theme(hc_theme_tufte()) %>%\n      hc_tooltip(headerFormat = 'x: <b>{point.x}</b>',\n                 pointFormat = '<table><tr><td>P(X = x): <b>{point.y}</b></td></tr></table>',\n                 useHTML = T)\n  })#end highchart\n  \n  output$integral <- renderText({\n    l_function <- l_calculation()\n    integrate(Vectorize(l_function), lower = 0, upper = t_instance())\n  })\n  \n})#end server\n\n\n",
    "created" : 1510774867038.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2178684672",
    "id" : "3E321394",
    "lastKnownWriteTime" : 1510779234,
    "last_content_update" : 1510779234475,
    "path" : "//my.files.iastate.edu/Users/cmgrimm/Desktop/GitHub/IE513_Project/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}